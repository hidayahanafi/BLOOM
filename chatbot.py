import google.generativeai as genai
import mysql.connector
from flask import Flask, request, jsonify
from flask_cors import CORS


genai.configure(api_key="AIzaSyAsJhhjw7mf-og50Tqnzn35COSHkGJKUWs")  # Remplace par ta vraie cl√© API


app = Flask(__name__)
CORS(app)  # Permettre les requ√™tes depuis Symfony

DB_CONFIG = {
    "host": "localhost",
    "user": "root",
    "password": "",  # Laissez vide si vous n'avez pas d√©fini de mot de passe
    "database": "pidev"  # Remplacez par le vrai nom de votre base de donn√©es
}


def get_db_connection():
    """Cr√©er une connexion √† la base de donn√©es MySQL."""
    connection = mysql.connector.connect(**DB_CONFIG)
    connection.database = DB_CONFIG["database"]  # üîπ Assurez-vous que la base est s√©lectionn√©e
    return connection

# üîπ Fonction pour r√©cup√©rer la liste des pharmacies
def get_pharmacies():
    try:
        connection = get_db_connection()
        cursor = connection.cursor(dictionary=True)
        cursor.execute("SELECT nom, adresse, email, tel, type, ville FROM pharmacie")
        pharmacies = cursor.fetchall()
        cursor.close()
        connection.close()

        if not pharmacies:
            return "Aucune pharmacie trouv√©e."

        response = "**Liste des pharmacies :**\n"
        for p in pharmacies:
            response += f"- **{p['nom']}** üìç{p['adresse']}, üìß {p['email']}, üìû {p['tel']}, üè• {p['type']} ({p['ville']})\n"
        
        return response
    except Exception as e:
        return f"‚ùå Erreur lors de la r√©cup√©ration des pharmacies : {str(e)}"

# üîπ Fonction pour r√©cup√©rer la liste des m√©dicaments
def get_medicaments():
    try:
        connection = get_db_connection()
        cursor = connection.cursor(dictionary=True)
        cursor.execute("SELECT nom, description, dosage, categorie, quantite, prix FROM medicament")
        medicaments = cursor.fetchall()
        cursor.close()
        connection.close()

        if not medicaments:
            return "Aucun m√©dicament trouv√©."

        response = "**Liste des m√©dicaments :**\n"
        for m in medicaments:
            response += f"- **{m['nom']}** ({m['description']}), Dosage: {m['dosage']}mg, Cat√©gorie: {m['categorie']}, Stock: {m['quantite']} unit√©s, Prix: {m['prix']}‚Ç¨\n"
        
        return response
    except Exception as e:
        return f"‚ùå Erreur lors de la r√©cup√©ration des m√©dicaments : {str(e)}"

# üîπ Fonction pour interagir avec Google Gemini et la base de donn√©es
def get_response(user_input):
    user_input = user_input.lower()

    # V√©rifier si l'utilisateur demande la liste des pharmacies ou m√©dicaments
    if "liste des pharmacies" in user_input or "pharmacies disponibles" in user_input:
        return get_pharmacies()
    elif "liste des m√©dicaments" in user_input or "m√©dicaments disponibles" in user_input:
        return get_medicaments()
    
    # Si ce n'est pas une demande sp√©ciale, utiliser Google Gemini
    try:
        model = genai.GenerativeModel("gemini-1.5-pro-latest")
        response = model.generate_content(user_input)
        return response.text if response else "D√©sol√©, je n'ai pas compris votre demande."
    except Exception as e:
        return f"‚ùå Erreur AI : {str(e)}"

@app.route("/chatbot", methods=["POST"])
def chatbot():
    try:
        user_input = request.json.get("message", "").strip()
        if not user_input:
            return jsonify({"response": "‚ö†Ô∏è Veuillez entrer un message valide."})

        # Obtenir la r√©ponse de l'IA ou de la base de donn√©es
        response_text = get_response(user_input)

        return jsonify({"response": response_text})
    except Exception as e:
        return jsonify({"response": f"‚ùå Erreur serveur : {str(e)}"}), 500

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=True)